import React, { useState } from 'react';
import './SecurityScanModal.css';

export interface CompanyDetails {
  companyName: string;
  industry: string;
  targetDomains: string[];
  contactEmail: string;
  contactPhone: string;
  companySize: 'small' | 'medium' | 'large' | 'enterprise';
  testingScope: string;
  complianceFrameworks: string[];
  criticalAssets: string;
  businessHours: string;
  emergencyContact: string;
  specialInstructions: string;
}

interface SecurityScanModalProps {
  isOpen: boolean;
  onClose: () => void;
  onLaunchScan: (companyDetails: CompanyDetails) => void;
  isScanning?: boolean;
}

const SecurityScanModal: React.FC<SecurityScanModalProps> = ({
  isOpen,
  onClose,
  onLaunchScan,
  isScanning = false
}) => {
  const [formData, setFormData] = useState<CompanyDetails>({
    companyName: '',
    industry: '',
    targetDomains: [''],
    contactEmail: '',
    contactPhone: '',
    companySize: 'medium',
    testingScope: '',
    complianceFrameworks: [],
    criticalAssets: '',
    businessHours: '',
    emergencyContact: '',
    specialInstructions: ''
  });

  const [errors, setErrors] = useState<Partial<CompanyDetails>>({});

  const industryOptions = [
    'Technology',
    'Financial Services',
    'Healthcare',
    'Manufacturing',
    'Retail',
    'Government',
    'Education',
    'Energy',
    'Telecommunications',
    'Other'
  ];

  const complianceOptions = [
    'SOC 2',
    'ISO 27001',
    'NIST',
    'GDPR',
    'HIPAA',
    'PCI DSS',
    'FISMA',
    'SOX',
    'CCPA'
  ];

  const handleInputChange = (
    field: keyof CompanyDetails,
    value: string | string[]
  ) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: undefined
      }));
    }
  };

  const handleDomainChange = (index: number, value: string) => {
    const newDomains = [...formData.targetDomains];
    newDomains[index] = value;
    handleInputChange('targetDomains', newDomains);
  };

  const addDomain = () => {
    handleInputChange('targetDomains', [...formData.targetDomains, '']);
  };

  const removeDomain = (index: number) => {
    const newDomains = formData.targetDomains.filter((_, i) => i !== index);
    handleInputChange('targetDomains', newDomains.length > 0 ? newDomains : ['']);
  };

  const handleComplianceChange = (framework: string) => {
    const current = formData.complianceFrameworks;
    const updated = current.includes(framework)
      ? current.filter(f => f !== framework)
      : [...current, framework];
    handleInputChange('complianceFrameworks', updated);
  };

  const validateForm = (): boolean => {
    const newErrors: Partial<CompanyDetails> = {};

    if (!formData.companyName.trim()) {
      newErrors.companyName = 'Company name is required';
    }

    if (!formData.industry) {
      newErrors.industry = 'Industry selection is required';
    }

    const validDomains = formData.targetDomains.filter(d => d.trim());
    if (validDomains.length === 0) {
      newErrors.targetDomains = ['At least one target domain is required'] as any;
    }

    if (!formData.contactEmail.trim()) {
      newErrors.contactEmail = 'Contact email is required';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.contactEmail)) {
      newErrors.contactEmail = 'Invalid email format';
    }

    if (!formData.testingScope.trim()) {
      newErrors.testingScope = 'Testing scope is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (validateForm()) {
      // Filter out empty domains
      const cleanedData = {
        ...formData,
        targetDomains: formData.targetDomains.filter(d => d.trim())
      };
      onLaunchScan(cleanedData);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="security-scan-modal-overlay">
      <div className="security-scan-modal">
        <div className="modal-header">
          <h2>
            <span className="modal-icon">üõ°Ô∏è</span>
            Security Penetration Testing Setup
          </h2>
          <button 
            className="close-button"
            onClick={onClose}
            disabled={isScanning}
          >
            √ó
          </button>
        </div>

        <form onSubmit={handleSubmit} className="modal-form">
          <div className="form-sections">
            {/* Company Information Section */}
            <div className="form-section">
              <h3>Company Information</h3>
              
              <div className="form-group">
                <label htmlFor="companyName">Company Name *</label>
                <input
                  id="companyName"
                  type="text"
                  value={formData.companyName}
                  onChange={(e) => handleInputChange('companyName', e.target.value)}
                  className={errors.companyName ? 'error' : ''}
                  disabled={isScanning}
                  placeholder="Enter company name"
                />
                {errors.companyName && <span className="error-text">{errors.companyName}</span>}
              </div>

              <div className="form-group">
                <label htmlFor="industry">Industry *</label>
                <select
                  id="industry"
                  value={formData.industry}
                  onChange={(e) => handleInputChange('industry', e.target.value)}
                  className={errors.industry ? 'error' : ''}
                  disabled={isScanning}
                  title="Select your company's industry"
                >
                  <option value="">Select Industry</option>
                  {industryOptions.map(industry => (
                    <option key={industry} value={industry}>{industry}</option>
                  ))}
                </select>
                {errors.industry && <span className="error-text">{errors.industry}</span>}
              </div>

              <div className="form-group">
                <label htmlFor="companySize">Company Size</label>
                <select
                  id="companySize"
                  value={formData.companySize}
                  onChange={(e) => handleInputChange('companySize', e.target.value as CompanyDetails['companySize'])}
                  disabled={isScanning}
                  title="Select your company size"
                >
                  <option value="small">Small (1-50 employees)</option>
                  <option value="medium">Medium (51-250 employees)</option>
                  <option value="large">Large (251-1000 employees)</option>
                  <option value="enterprise">Enterprise (1000+ employees)</option>
                </select>
              </div>
            </div>

            {/* Target Configuration Section */}
            <div className="form-section">
              <h3>Target Configuration</h3>
              
              <div className="form-group">
                <label>Target Domains/IPs *</label>
                {formData.targetDomains.map((domain, index) => (
                  <div key={index} className="domain-input-group">
                    <input
                      type="text"
                      value={domain}
                      onChange={(e) => handleDomainChange(index, e.target.value)}
                      placeholder="example.com or 192.168.1.1"
                      className={errors.targetDomains ? 'error' : ''}
                      disabled={isScanning}
                    />
                    {formData.targetDomains.length > 1 && (
                      <button
                        type="button"
                        onClick={() => removeDomain(index)}
                        className="remove-domain-btn"
                        disabled={isScanning}
                      >
                        √ó
                      </button>
                    )}
                  </div>
                ))}
                <button
                  type="button"
                  onClick={addDomain}
                  className="add-domain-btn"
                  disabled={isScanning}
                >
                  + Add Another Domain
                </button>
                {errors.targetDomains && <span className="error-text">At least one target domain is required</span>}
              </div>

              <div className="form-group">
                <label>Testing Scope *</label>
                <textarea
                  value={formData.testingScope}
                  onChange={(e) => handleInputChange('testingScope', e.target.value)}
                  placeholder="Describe what systems, applications, or network segments should be tested..."
                  className={errors.testingScope ? 'error' : ''}
                  disabled={isScanning}
                  rows={3}
                />
                {errors.testingScope && <span className="error-text">{errors.testingScope}</span>}
              </div>

              <div className="form-group">
                <label>Critical Assets</label>
                <textarea
                  value={formData.criticalAssets}
                  onChange={(e) => handleInputChange('criticalAssets', e.target.value)}
                  placeholder="List any critical systems that require special attention or should be avoided..."
                  disabled={isScanning}
                  rows={2}
                />
              </div>
            </div>

            {/* Contact Information Section */}
            <div className="form-section">
              <h3>Contact Information</h3>
              
              <div className="form-group">
                <label htmlFor="contactEmail">Primary Contact Email *</label>
                <input
                  id="contactEmail"
                  type="email"
                  value={formData.contactEmail}
                  onChange={(e) => handleInputChange('contactEmail', e.target.value)}
                  className={errors.contactEmail ? 'error' : ''}
                  disabled={isScanning}
                  placeholder="contact@company.com"
                />
                {errors.contactEmail && <span className="error-text">{errors.contactEmail}</span>}
              </div>

              <div className="form-group">
                <label htmlFor="contactPhone">Contact Phone</label>
                <input
                  id="contactPhone"
                  type="tel"
                  value={formData.contactPhone}
                  onChange={(e) => handleInputChange('contactPhone', e.target.value)}
                  disabled={isScanning}
                  placeholder="+1 (555) 123-4567"
                />
              </div>

              <div className="form-group">
                <label>Emergency Contact</label>
                <input
                  type="text"
                  value={formData.emergencyContact}
                  onChange={(e) => handleInputChange('emergencyContact', e.target.value)}
                  placeholder="Name and phone number for emergency situations"
                  disabled={isScanning}
                />
              </div>
            </div>

            {/* Compliance & Scheduling Section */}
            <div className="form-section">
              <h3>Compliance & Scheduling</h3>
              
              <div className="form-group">
                <label>Compliance Frameworks</label>
                <div className="compliance-checkboxes">
                  {complianceOptions.map(framework => (
                    <label key={framework} className="checkbox-label">
                      <input
                        type="checkbox"
                        checked={formData.complianceFrameworks.includes(framework)}
                        onChange={() => handleComplianceChange(framework)}
                        disabled={isScanning}
                      />
                      {framework}
                    </label>
                  ))}
                </div>
              </div>

              <div className="form-group">
                <label>Business Hours</label>
                <input
                  type="text"
                  value={formData.businessHours}
                  onChange={(e) => handleInputChange('businessHours', e.target.value)}
                  placeholder="e.g., Monday-Friday 9AM-5PM EST"
                  disabled={isScanning}
                />
              </div>

              <div className="form-group">
                <label>Special Instructions</label>
                <textarea
                  value={formData.specialInstructions}
                  onChange={(e) => handleInputChange('specialInstructions', e.target.value)}
                  placeholder="Any special requirements, restrictions, or notes for the security team..."
                  disabled={isScanning}
                  rows={3}
                />
              </div>
            </div>
          </div>

          <div className="modal-footer">
            <button
              type="button"
              onClick={onClose}
              className="cancel-btn"
              disabled={isScanning}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="launch-scan-btn"
              disabled={isScanning}
            >
              {isScanning ? (
                <>
                  <span className="spinner"></span>
                  Launching Scan...
                </>
              ) : (
                <>
                  üöÄ Launch Security Scan
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default SecurityScanModal;